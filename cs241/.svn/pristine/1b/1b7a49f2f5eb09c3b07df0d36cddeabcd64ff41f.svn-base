/**
 * Parallel Make
 * CS 241 - Spring 2016
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include "parmake.h"
#include "rule.h"
#include "queue.h"
#include "parser.h"
// Treat this as main

queue_t rules;


void parsed_new_command(char * target, char * command) {
	size_t i;
	size_t q_size; 
	char * com;

	com = strdup(command);
	q_size = queue_size(&rules);
	
	// Go through the queue to find the one that matches with target.
	for(i = 0; i < q_size; i ++) {
		rule_t * temp = queue_at(&rules, i);
		if(strcmp(temp->target, target) == 0) {
			queue_enqueue(temp->deps, com);
		}
	}
}


// Adding all the rules(dependency) into one place
void parsed_new_dependency(char * target, char * dependency) {
	size_t i;
	size_t q_size; 
	char * dep;

	dep = strdup(dependency);
	q_size = queue_size(&rules);

	// Go through the queue to find the one that matches with target.
	for(i = 0; i < q_size; i ++) {
		rule_t * temp = queue_at(&rules, i);
		if(strcmp(temp->target, target) == 0) {
			queue_enqueue(temp->deps, dep);
		}
	}
}


// Adding all the rules(target) into one place.
void parsed_new_target(char * target) {
	rule_t * current_rule = (rule_t*)malloc(sizeof(rule_t));
	rule_init(current_rule);
	current_rule->target = strdup(target);
	queue_enqueue(&rules , current_rule);
}

int parmake(int argc, char **argv) {
  
  	char temp = 0;
  	char * fname = 0;
  	int threads = 1;
  	int fflag = 0;
  	int jflag = 0;
  	int fileStatus = 0;

  	queue_init(&rules);

	while((temp = getopt(argc, argv, "f:j:")) != 1) {
		switch(temp) {
			case 'f':
				if(fflag == 0) {
					fflag = 1;
					fname = strdup(optarg);
					fileStatus = access(fname, F_OK);
					if(fileStatus == -1) {
						printf("%s does not exits\n", fname);
						exit(1);
					}
				} else {
					printf("Only one -f flag is allowed\n");
				}	
				break;

			case 'j':
				if(jflag == 0) {
					jflag = 1;
					threads = atoi(optarg);
					break;
				} else {
					printf("Only one -j flag is allowed\n");
				}
		}
	}
	if(fflag == 0) {
		fileStatus = access("./makefile", F_OK);
		if(fileStatus == -1) {
			fileStatus = access("./Makefile", F_OK);
			if(fileStatus == -1) {
				exit(1);
			} else {
				fname = "./Makefile";
			}
		} else {
			fname = "./makefile";
		}
	}


  // good luck!
  return 0;
}

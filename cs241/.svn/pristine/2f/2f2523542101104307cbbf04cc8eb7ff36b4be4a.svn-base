#include "editor.h"
#include "document.h"
#include "format.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

char *get_filename(int argc, char *argv[]) {
  if(argc <= 1) {
		return NULL;
	}
  else { 
  	return argv[1];
  }
}

void handle_display_command(Document *document, const char *command) {
  	size_t line_number;
  	char current_command[2];

  	sscanf(command, "%s %zd", current_command, &line_number);

  	if(line_number < 1) {
  		invalid_line();
  		return;
  	}
	
}

void handle_write_command(Document *document, const char *command) {
	size_t line_number;													// This will store what line number we need to append to.
	char* var = strdup(command);
	char current_command[2];
	
	sscanf(command, "%s %zd ", current_command, &line_number);			// Scanning the command here and storing into appropiate variables
	
	size_t j, i = 0;													// j is for the command and i is for the variable
	int flag_to_copy_alpha = 0;
	int flag_to_copy_space = 0;
	for(j = 1; j < strlen(command); j++) {
		if(isalpha(command[j])) {
			flag_to_copy_alpha = 1;
		}
		if(isspace(command[j])) {
			flag_to_copy_space = 1;
		}
		if(flag_to_copy_alpha && flag_to_copy_space) {
			var[i] = command[j];
			i++;
		}
	}

	if(line_number < 1) {
		invalid_line();
		return;
	}
	
	char* token = strsep(&var, "$");									// This is giving tokens based on what is inbetween each $ because the $ indicates a new line.
	int multiple = 0;													// This is a flag to let us know that we have multiple lines to add in.
	
	for(size_t i = 0; i < strlen(var); i++) {							// Going through the variable that is holding the string and seeing if we have a $ to deal with.
		if(var[i] == '$') {
			multiple = 1;												// Setting the flag that we have multiple lines to handle in the program
		}
	}
	
	Document_set_line(document, line_number-1, token);
	
	while(var) {
		token = strsep(&var, "$");
		Document_insert_line(document, line_number, token);
		line_number++;
	}
	free(var);

  
}

void handle_append_command(Document *document, const char *command) {
  	size_t line_number;													// This will store what line number we need to append to.
	char* var = strdup(command);
	char current_command[2];
	
	sscanf(command, "%s %zd %s", current_command, &line_number, var);	// Scanning the command here and storing into appropiate variables
	
	if(line_number < 1 || line_number > Document_size(document)) {
		invalid_line();
		return;
	}
	char* token = strsep(&var, "$");									// This is giving tokens based on what is inbetween each $ because the $ indicates a new line.
	int multiple_line_flag = 0;											// This is a flag to let us know that we have multiple lines to add in.
	
	for(size_t i = 0; i < strlen(var); i++)	{							// Going through the variable that is holding the string and seeing if we have a $ to deal with.
		if(var[i] == '$') {
			multiple_line_flag = 1;
		}																// Setting the flag the 1 since we have multiple lines.
	}

	char* new_input_line = (char*)malloc(strlen(command));
	strcpy(new_input_line, Document_get_line(document, line_number-1));	// Copying the existing stuff.
	strcat(new_input_line, token);										// Concatinating the token and the existing stuff.
	
	Document_set_line(document, line_number-1, new_input_line);
	
	while(var) {
		token = strsep(&var, "$");
		Document_insert_line(document, line_number, token);				// Inserting the line in the right place.
		line_number++;
	}
	free(var);															// Freeing up allocated space.
	free(new_input_line);
}

void handle_delete_command(Document *document, const char *command) {
  	size_t line_number; 												// This will store what the line number is.
	char current_command[10]; 											// This will hold the command that we are executing
	sscanf(command, "%s %zd", current_command, &line_number); 				// Scanning the command here
	if(line_number < 1 || line_number > Document_size(document)) {
		invalid_line();
		return;
	}
	Document_delete_line(document, line_number-1);						// Deleting the line from the document and shifts things up by itself
}

void handle_search_command(Document *document, const char *command) {
  // TODO implement handle_search_command
}

void handle_save_command(Document *document, const char *filename) {
  Document_write_to_file(document, filename);
}

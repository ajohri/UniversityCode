/**
 * Machine Problem: Password Cracker
 * CS 241 - Spring 2016
 */

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <time.h>
#include <string.h>
#include <pthread.h>

#include "cracker1.h"
#include "thread_status.h"
#include "utils.h"
#include <unistd.h>
#include "crypt.h"

#define MAX_QUEUE 512
#define MAX_SIZE 512

Queue task_queue;
char line[MAX_SIZE];
char *buff;
struct crypt_data cdata;


// Use the logic in editor to read a line
// - Code for reading a line
// We will creat a special node to show the last line
// Creat a queue. One node for each line int password file
// Creat a thread pool
// - Each thred to pull an elemnt from the node
// - Process the elemnt
// - Thread exits when it hits the special node ( for end of file)
// Join all the threads
// - Pull the last node
// - Destroy the queue 

// Create the required number of threads and launch the same to process nodes in the
// shared queue.

char * crack_password(char * in, int prefix, int * count, const char * hash) {

	char terminating_string[8];
	unsigned int i;
	int success = 1;
	int result = 1;
	
	printf("Prefix: %d Input:%s\n", prefix, in);
	
	for( i = prefix; i < strlen(in); i++) {			// Changes everything to a's
		in[i] = 'a';
	}
	printf("Starting String: %s\n", in);

	for( i = 0; i < strlen(in); i++) {				// Makes a copy of the string that ends in z's
		if(i < (unsigned int)prefix) {
			terminating_string[i] = in[i];
		}
		else {
			terminating_string[i] = 'z';
		}
	}

	printf("Terminating String: %s\n", terminating_string);

	
	while(success) {
		char * hashed = crypt_r(in, "xx", &cdata);
		count++;
		if(strcmp(hashed, hash) == 0) {
			success = 0;
			result = 0;
		}
		else {
			success = incrementString(in + prefix);
		}
		if(strcmp(in, terminating_string) == 0) {
			success = 0;
		}
	}
	if(result == 1) {
		printf("Failure need to increment the number of failed passwords\n");
	}
	else {
		printf("Was able to recover passord");
	}
	return in;
}

void decode(char * total_line , char **username, char **hash, char **in) {
	
	*username = strsep(&total_line, " ");
	*hash = strsep(&total_line, " ");
	*in = total_line;
	printf("User:%s\n Hash:%s\n Input:%s\n", *username, *hash, *in);
}



void * process_task(void * ptr) {
	char *task, *username, *hash, *inp, *ret;
	char *copy_string;
  	unsigned int	thread_id;
  	int prefix, count = 0;

  	Queue * queue = (Queue *)ptr;

	thread_id = pthread_self();
	while(1) {
		printf("ThreadID: %u\n", thread_id);
		task = (char *)Queue_pull(queue);
	  	copy_string = (char *)malloc(strlen(task) + 2);
	  	strcpy(copy_string, task);
		if(task == NULL) {
			Queue_push(queue, NULL);
			break;
		}
		else
		{
			printf("Pointer to string inside while: %s ThreadID: %u\n", task, thread_id);
			decode(copy_string, &username, &hash, &inp);
			prefix = getPrefixLength(inp);
			ret = crack_password(inp, prefix, &count, hash);
		 	printf("Password: %s\n", ret);
		}
		
	}

	return NULL;
}


int start(size_t thread_count) {

  cdata.initialized = 0;

  printf("%zu\n", thread_count);
  
  Queue_init(&task_queue, MAX_QUEUE);

  while(fgets(line, MAX_SIZE, stdin)) {
  	buff = (char *)calloc(512, sizeof(char));
  	strcpy(buff, line);
  	Queue_push(&task_queue, buff);
  }
  Queue_push(&task_queue, NULL);
  
  pthread_t	*threads;
  size_t i;

  threads = (pthread_t *)calloc(thread_count, sizeof(pthread_t));

  for (i = 0; i<thread_count; i++) {
	pthread_create(&threads[i], NULL, &process_task, (void *)(&task_queue));
  }

  for (i = 0; i< thread_count; i++)
	pthread_join(*(threads +i), NULL);

  return 0;
}
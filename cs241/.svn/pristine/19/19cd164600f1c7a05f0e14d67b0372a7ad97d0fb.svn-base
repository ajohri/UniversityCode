/**
 * Machine Problem 1
 * CS 241 - Spring 2016
 */

/* An automatically-expanding array of strings. */
#include "vector.h"
#include <assert.h>
#include <string.h>
#include <stdio.h>

#define INITIAL_CAPACITY 10
#define MAXIMUM(a,b) (((a)>(b))?(a):(b))

/* Allocate and return a new Vector structure. */
Vector *Vector_create() {
  Vector* returnVal = (Vector*)malloc(sizeof(Vector));
  returnVal->array = (char**)malloc(INITIAL_CAPACITY*sizeof(char*));
  for(int i = 0; i < 10; i++)
    returnVal->array[i] = NULL;
  returnVal->size = 0;
  returnVal->capacity = INITIAL_CAPACITY;
  return returnVal;
}

/**
 * Deallocate a Vector structure.
 * Every non-NULL entry in array from array[0] to array[size-1] will
 * need to be free()d.
*/
void Vector_destroy(Vector *vector) {
  assert(vector);
  for(size_t i = 0; i < vector->capacity; i++) {
    if(vector->array[i] != NULL)
      free(vector->array[i]);
  }
  free(vector->array);
  free(vector);
}

/* Return the number of entries in use in this array. */
size_t Vector_size(Vector *vector) {
  assert(vector);
  return vector->size;
}

/**
 * Sets the size of the array.
 *
 * If the array grows, new entries will be initialized to NULL.
 * If the array shrinks, entries past the new end of the array
 * will be deallocated.
 *
 * If the new size is larger than the capacity of the array, the
 * capacity will need to be increased, meaning the array will need to
 * be reallocated.  The new capacity should be at least twice as big
 * as it was before. In other words:
 *
 * if new_size > capacity:
 *      new_capacity = maximum(capacity * 2, new_size);
*/
void Vector_resize(Vector *vector, size_t new_size) {
  assert(vector);
  if(new_size < vector->size) {
    for(size_t i = new_size; i < vector->size; i++) {
      free(vector->array[i]);
      vector->array[i] = NULL;
    }
    vector->size = new_size;   
  } else if(new_size > vector->size) {
    if(new_size > vector->capacity) {
      vector->capacity = max((vector->capacity)*2, new_size);
      vector->array = (char**)realloc(vector->array, (vector->capacity)*(sizeof(char*)));
    }
    for(size_t i = vector->size; i < vector->capacity; i++)
      vector->array[i] = NULL;
    vector->size = new_size;
  } 
}

/**
 * Allocate a copy of 'str' and store it in array[index].  If 'str' is NULL,
 * just store NULL in array[index].  Note that if the vector is allocating
 * memory for the entry (which will happen when th entry is not NULL), then it
 * should also be the freeing it (hint,hint)
*/
void Vector_set(Vector *vector, size_t index, const char *str) {
  assert(vector);
  if(index >= vector->size) {
    Vector_resize(vector, index+1);
  }
  if(str == NULL) {
    if(vector->array[index] != NULL)
      free(vector->array[index]);
    vector->array[index] = NULL;
  } else {
    if(vector->array[index] != NULL)
      free(vector->array[index]);
    vector->array[index] = (char*)malloc(strlen(str)+1);
    strcpy(vector->array[index], str);
  }
}


/**
 * Returns the entry stored at array[index].
 * If array[index]==NULL, this will return NULL.
 *
 * This does not return a copy of the entry; it returns the actual
 * char* stored at array[index]. This means the caller must not
 * deallocate the entry (if the entry is non-null).
*/
 const char *Vector_get(Vector *vector, size_t index) {
  assert(vector);
  assert(index < vector->size && index >= 0);
  if(vector->array[index] == NULL)
    return NULL;
  else
    return vector->array[index];
}

/**
 * Inserts a copy of 'str' or NULL if str is NULL
 * and stores it in array[index].
 * Note the array[index] could already contain a entry,
 * in which case the entry at array[index] and all subsequent
 * entries should be shifted down.
 * Also note that index could be well beyond the position of
 * the last entry. In which case the vector should resize()
 * to barely accommodate that new entry.
*/
void Vector_insert(Vector *vector, size_t index, const char *str) {
  assert(vector);
  if(index >= vector->size) {
    Vector_resize(vector, index+1);
    if(str == NULL)
      vector->array[index] = NULL;
    else {
      vector->array[index] = (char*)malloc(strlen(str)+1);
      strcpy(vector->array[index], str);
    }
  }
  else {
    Vector_resize(vector, vector->size + 1);
    for(size_t i = vector->size-1; i > index; i--) {
      if(vector->array[i-1] == NULL) {
        if(vector->array[i] != NULL)
          free(vector->array[i]);
        vector->array[i] = NULL;
      }
      else {
        if(vector->array[i] != NULL)
          free(vector->array[i]);
        vector->array[i] = (char*)malloc(strlen(vector->array[i-1])+1);
        strcpy(vector->array[i], vector->array[i-1]);
      }
    }
    if(str == NULL) {
      if(vector->array[index] != NULL)
        free(vector->array[index]);
      vector->array[index] = NULL;
    } else {
      if(vector->array[index] != NULL)
        free(vector->array[index]);
      vector->array[index] = (char*)malloc(strlen(str)+1);
      strcpy(vector->array[index], str);  
    }
  }
}

/**
 * Removes whatever entry is contained in array[index].
 * Note that index does not have to be the last element of the vector,
 * in which case you should not only remove the entry at array[index],
 * but also shift all subsequent entries down.
 * It should be shift up -- ask TA
 * Do not forget to resize the vector accordingly.
*/
void Vector_delete(Vector *vector, size_t index) {
  assert(vector);
  for(size_t i = index; i < vector->size - 1; i++) {
    if(vector->array[i+1] == NULL) {
      if(vector->array[i] != NULL)
        free(vector->array[i]);
      vector->array[i] = NULL;
    }
    else {
      free(vector->array[i]);
      vector->array[i] = (char*)malloc(strlen(vector->array[i+1])+1);
      strcpy(vector->array[i], vector->array[i+1]);
    }
  }
  Vector_resize(vector, vector->size-1);
}

/**
 * Inserts 'str' (or NULL) right after the last element in the vector.
*/
void Vector_append(Vector *vector, const char *str) {
  assert(vector);
  Vector_resize(vector, vector->size + 1);
  if(str != NULL) {
    vector->array[vector->size - 1] = (char*)malloc(strlen(str)+1);
    strcpy(vector->array[vector->size - 1], str);
  }
}
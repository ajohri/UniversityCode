/**
 * Mangled Mutexes Lab
 * CS 241 - Spring 2016
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <pthread.h>

/* You should create a struct that will get passed in by reference to your
 * start_routine. */
 typedef struct {
  size_t  start; 
  size_t  end;
 } Range;

// Globals
size_t number_of_primes;    // Total number of primes 

static pthread_mutex_t prime_mutex = PTHREAD_MUTEX_INITIALIZER;


size_t isprime(size_t num) {
  size_t i;

  if(num == 1)        // Handling the case that 1 is a
          // not a prime number.
    return 0;
  if(num == 2)        // Handling the case that 2 is a
          // prime number.
    return 1;
  if(num == 3)        // Handling the case that 3 is a
          // prime number.
    return 1;
  
  for (i = 2; i < num; i++) {   // Diving each of these numbers by
          // our incrementor 
    if(!(num % i))
      return 0;
  }
  return 1;
}

void incrementer(void *ptr) { 

  size_t i, start, end;
  int prime_num;
  Range *range;

  range = (Range *)ptr;
  start = range->start;
  end   = range->end;

  for (i = start; i <= end; i++) {
    prime_num = isprime(i); 
    pthread_mutex_lock(&prime_mutex);
   /* Do work. */
    number_of_primes += prime_num;
    pthread_mutex_unlock(&prime_mutex);
  }

}



// This function parses the arguments in argv.
// An error message is printed if any of the following happens:
//  An incorrect number of arguments are passed in.
//  'start', 'end', or 'num_threads' is less than 1.
//  'end' < 'start'.
// Else an array of 3 size_t elements are returned
// in the following order: 'start', 'end', 'num_threads'.
// It is the callers job to free the memory used.

size_t *arg_parse(int argc, char *argv[]) {

  if (argc != 4) {
    fprintf(stderr, "usage: %s [start] [end] [num_threads]\n", argv[0]);
    exit(1);
  }

  char *endptr;
  long tokargs[3];

  for (size_t i = 0; i < sizeof(tokargs) / sizeof(tokargs[0]); i++) {
    tokargs[i] = strtol(argv[i + 1], &endptr, 10);
    if (*endptr != '\0') {
      fprintf(stderr, "Failed to convert an arugment to a long!\n");
      exit(2);
    }
    if (tokargs[i] < 1) {
      fprintf(stderr,
              "Please have all arguments be greater than or equal to 1!\n");
      exit(3);
    }
  }
  if (tokargs[1] < tokargs[0]) {
    fprintf(stderr, "Please give a valid range!\n");
    exit(4);
  }
  size_t *args = malloc(3 * sizeof(size_t));
  for (size_t i = 0; i < sizeof(tokargs) / sizeof(tokargs[0]); i++) {
    args[i] = (size_t)tokargs[i];
  }
  return args;
}

// Call on this function when you are ready to print the result.
void print_result(size_t number_of_primes, size_t start, size_t end) {

  printf("There are %zu primes between %zu and %zu inclusive\n",
         number_of_primes, start, end);
}

Range *split_ranges(size_t start, size_t end, int num_range) {
  Range *range_array;
  int i, range_length;
  size_t  min;  


 range_array = (Range *)calloc(num_range, sizeof(Range));
 range_length = (end-start +1)/num_range;

 min = start;
 for (i=0; i< num_range-1 ; i++) {
  range_array->start = min;
  range_array->end = min + range_length -1; 
  min = min + range_length;
  range_array++;
 }

 // Last range needs to be treated separately as it length may be less than
 // less than the range_length

 range_array->start = min;
 range_array->end = end;
 return range_array;
}


// Prints the number of primes
// inbetween argv[1] and argv[2] inclusive with argv[3] threads.

int main(int argc, char *argv[]) {

  size_t  *input_array;
  int   i,num_threads;
  Range   *range_array;
  pthread_t *threads;

  input_array = arg_parse(argc, argv);    // Getting the input via the
  num_threads = input_array[2];
  threads = (pthread_t *)calloc(num_threads, sizeof(pthread_t));

  printf("intput 0:%zu intput 1:%zu intput 2:%zu \n", input_array[0], input_array[1], input_array[2]);
  printf("%d\n", num_threads);

  range_array = split_ranges(input_array[0], input_array[1], input_array[2]);
            // parser that is given to su
/* Create num_threads threads */    

  for(i=0; i<num_threads; i++)
    pthread_create (threads+i,NULL, (void *) &incrementer, (void *) (range_array+i));

 /* Main block now waits for all the threads to terminate, before it exits
    If main block exits, both threads exit, even if the threads have not
    finished their work */ 

  for(i=0; i<num_threads; i++)
    pthread_join(*(threads+i), NULL);

  print_result(number_of_primes, input_array[0], input_array[1]);
  pthread_mutex_destroy(&prime_mutex);

  return 0;
}
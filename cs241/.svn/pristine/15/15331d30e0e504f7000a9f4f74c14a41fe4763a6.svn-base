/**
 * Machine Problem 4
 * CS 241 - Spring 2016
 */

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MIN_ALLOC 1024

typedef long Pad;										// for alignment to long boundary

union meta_data {
	struct {
		union meta_data *ptr;
		unsigned size;
		/* data */
	}s;
	Pad x;
};

typedef union meta_data Meta_Data;

static Meta_Data base;
static Meta_Data *freep = NULL;

/**
 * Allocate space for array in memory
 *
 * Allocates a block of memory for an array of num elements, each of them size
 * bytes long, and initializes all its bits to zero. The effective result is
 * the allocation of an zero-initialized memory block of (num * size) bytes.
 *
 * @param num
 *    Number of elements to be allocated.
 * @param size
 *    Size of elements.
 *
 * @return
 *    A pointer to the memory block allocated by the function.
 *
 *    The type of this pointer is always void*, which can be cast to the
 *    desired type of data pointer in order to be dereferenceable.
 *
 *    If the function failed to allocate the requested block of memory, a
 *    NULL pointer is returned.
 *
 * @see http://www.cplusplus.com/reference/clibrary/cstdlib/calloc/
 */
void *calloc(size_t num, size_t size) {
  // implement calloc!

	void *ptr = malloc(num*size);

	if(ptr)
		bzero(ptr,  num*size);

  	return ptr;
}


static Meta_Data *more_space(unsigned nu) {
	char *cp;
	Meta_Data *up;

	if(nu < MIN_ALLOC) {
		nu = MIN_ALLOC;
	}
	cp = sbrk(nu * sizeof(Meta_Data));
	if(cp == (char *) - 1) {
		return NULL;
	}
	up = (Meta_Data *) cp;
	up->s.size = nu;
	free((void *)(up + 1));
	return freep;
}


/**
 * Allocate memory block
 *
 * Allocates a block of size bytes of memory, returning a pointer to the
 * beginning of the block.  The content of the newly allocated block of
 * memory is not initialized, remaining with indeterminate values.
 *
 * @param size
 *    Size of the memory block, in bytes.
 *
 * @return
 *    On success, a pointer to the memory block allocated by the function.
 *
 *    The type of this pointer is always void*, which can be cast to the
 *    desired type of data pointer in order to be dereferenceable.
 *
 *    If the function failed to allocate the requested block of memory,
 *    a null pointer is returned.
 *
 * @see http://www.cplusplus.com/reference/clibrary/cstdlib/malloc/
 */
void *malloc(size_t size) {
  // implement malloc!
	Meta_Data *p, *prevp;
	Meta_Data *more_space(unsigned);
	unsigned num;

	num = (size + sizeof(Meta_Data) - 1) / sizeof(Meta_Data) + 1;
	if((prevp = freep) == NULL) {
		base.s.ptr = freep = prevp = &base;
		base.s.size = 0;
	}
	for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr) {
		if(p->s.size >= num) {
			if(p->s.size == num){
				prevp->s.ptr = p->s.ptr;
			} 
			else {
				p->s.size -= num;
				p += p->s.size;
				p->s.size = num;
			}
			freep = prevp;
			return (void *)(p + 1);
		}
		if(p == freep) {
			if ((p = more_space(num)) == NULL) {
				return NULL;
			}
		}
	}
}

// void move_data(mem_ptr src, mem_ptr dst){
// }

/**
 * Deallocate space in memory
 *
 * A block of memory previously allocated using a call to malloc(),
 * calloc() or realloc() is deallocated, making it available again for
 * further allocations.
 *
 * Notice that this function leaves the value of ptr unchanged, hence
 * it still points to the same (now invalid) location, and not to the
 * null pointer.
 *
 * @param ptr
 *    Pointer to a memory block previously allocated with malloc(),
 *    calloc() or realloc() to be deallocated.  If a null pointer is
 *    passed as argument, no action occurs.
 */
void free(void *ap) {
	Meta_Data *bp, *p;

	bp = (Meta_Data *)ap - 1;
	for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr) {
		if(p >= p->s.ptr && (bp > p || bp < p->s.ptr)) {
			break;
		}
	}
	if(bp + bp->s.size == p->s.ptr) {
		bp->s.size += p->s.ptr->s.size;
		bp->s.ptr = p->s.ptr->s.ptr;
	} else {
		bp -> s.ptr = p->s.ptr;
	}
	if(p + p->s.size == bp) {
		p->s.size += bp->s.size;
		p->s.ptr = bp->s.ptr;
	} else {
		p->s.ptr = bp;
	}
	freep = p;
	
}

/**
 * Reallocate memory block
 *
 * The size of the memory block pointed to by the ptr parameter is changed
 * to the size bytes, expanding or reducing the amount of memory available
 * in the block.
 *
 * The function may move the memory block to a new location, in which case
 * the new location is returned. The content of the memory block is preserved
 * up to the lesser of the new and old sizes, even if the block is moved. If
 * the new size is larger, the value of the newly allocated portion is
 * indeterminate.
 *
 * In case that ptr is NULL, the function behaves exactly as malloc, assigning
 * a new block of size bytes and returning a pointer to the beginning of it.
 *
 * In case that the size is 0, the memory previously allocated in ptr is
 * deallocated as if a call to free was made, and a NULL pointer is returned.
 *
 * @param ptr
 *    Pointer to a memory block previously allocated with malloc(), calloc()
 *    or realloc() to be reallocated.
 *
 *    If this is NULL, a new block is allocated and a pointer to it is
 *    returned by the function.
 *
 * @param size
 *    New size for the memory block, in bytes.
 *
 *    If it is 0 and ptr points to an existing block of memory, the memory
 *    block pointed by ptr is deallocated and a NULL pointer is returned.
 *
 * @return
 *    A pointer to the reallocated memory block, which may be either the
 *    same as the ptr argument or a new location.
 *
 *    The type of this pointer is void*, which can be cast to the desired
 *    type of data pointer in order to be dereferenceable.
 *
 *    If the function failed to allocate the requested block of memory,
 *    a NULL pointer is returned, and the memory block pointed to by
 *    argument ptr is left unchanged.
 *
 * @see http://www.cplusplus.com/reference/clibrary/cstdlib/realloc/
 */
void *realloc(void *ptr, size_t size) {
 	
	if(ptr == NULL) {
		return malloc(size);
	}

	if(size == 0) {
		free(ptr);
		return NULL;
	}

	Meta_Data* bp = (Meta_Data*)(ptr - sizeof(Meta_Data));
	size_t new_size = 0;
	size_t old_size = bp->s.size;

	if(size <= old_size) {
		new_size = size;
	}
	else {
		new_size = old_size;
	}

	void* return_value = malloc(new_size);
	memcpy(return_value, ptr, new_size);
	free(ptr);
	return return_value;


 // 	void	*ret_ptr;
	// Meta_Data	*bp;
	// size_t	old_size;
	
	// if (!size) {
	// 	free(ptr);
	// 	return NULL;
	// }

	// if (!ptr) {
	// 	ret_ptr = malloc(size);
	// 	return (ret_ptr);
	// }

	// bp = (Meta_Data *)ptr - 1;		// Ptr to the block meta_data	
	// old_size = bp->s.size;

	// ret_ptr = malloc(size);
	// if(!ret_ptr) 			// Failed to allocate new memory
	// 	return NULL;

	// if (size <= old_size) {	
	// 	memcpy(ret_ptr, ptr, size);
	// }
	// else{
	// 	memcpy(ret_ptr, ptr, old_size);
	// }
	
	// free(ptr);			// Free the old pointer


 //  	return ret_ptr;
}

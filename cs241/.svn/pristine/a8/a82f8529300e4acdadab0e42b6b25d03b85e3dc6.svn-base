/**
 * Machine Problem: Shell
 * CS 241 - Spring 2016
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include "format.h"
#include <string.h>
#include <wordexp.h>

#include "format.h"
#include "log.h"

char	*command;
char	**args;
size_t		numtokens;

void handle_changing_directory(Log *logname) {

	//char buf[100];
	char *full_path;
	pid_t	mypid = getpid();
	char *pwd ;
	

	args = strsplit(command, " ", &numtokens);

    full_path = get_full_path(args[1]);
	if (chdir(full_path) == -1) { /* change cwd to path */   
		print_no_directory(full_path);
		return;
	}
	if(logname != NULL)
		Log_add_command(logname, command);

	pwd = get_current_dir_name();
	print_prompt(pwd, mypid);

	free(full_path);
}

void handle_death(Log *logname) {

    // Add code to write the history to log
	if(logname != NULL)
		Log_save(logname, command);
	exit(0);
}

void handle_history(Log *logname) {

	size_t	index, size;
	char *command;
	//char buf[100];
	pid_t	mypid = getpid();
	char *cwd = get_current_dir_name();

	size = Log_size(logname);
	for (index = 0; index< size ; index++) {
                command = strdup(Log_get_command(logname, index)); //strdup may need to add + 1 to the index
		fprintf(stdout, "%zu %s\n", index, command); 
	}

	print_prompt(cwd, mypid);
	free(cwd);
}

void handle_certain_command(Log *logname, size_t index) {

//	char *command;
	size_t	size;
	pid_t	pid;


	size = Log_size(logname);

	if (size < index) {
		print_invalid_index();
		exit (-1);
	}
	command = strdup(Log_get_command(logname, index));

	pid = fork();

    	if(pid > 0) {
    		int status;
		pid_t	mypid = getpid();
		char *cwd = get_current_dir_name();

    	waitpid(pid, &status, 0);
	    
	    Log_add_command(logname, command);
		print_prompt(cwd, mypid);
		free(cwd);
    	} else if(pid == 0){			//Child process
		pid_t	childpid;
	
		childpid = getpid();
    		print_command_executed(childpid);

		args = strsplit(command, " ", &numtokens);
    		execvp(args[0], args);

    		print_exec_failed(command);
    	}
    	else
    		print_fork_failed();

}

void handle_prefix_command_history(Log * logname, char * prefix) {
	size_t	size, index;
//	char	*command;
	int	found = 0, status;
	pid_t	pid;

	size = Log_size(logname);
	
	for (index = size - 1 ; index > 0; index--) { // might need to make it (size - 1)
		command = strdup(Log_get_command(logname, index));
		if(!strncmp(prefix, command, strlen(prefix))) {
			found = 1;
			break;
		}
	}
	if (found) {
		pid = fork();
		if(pid > 0) {
			pid_t	mypid = getpid();
			char *cwd = get_current_dir_name();

			waitpid(pid, &status, 0);
	    	
	    	Log_add_command(logname, command);
			print_prompt(cwd, mypid);
			free(cwd);
		} else if (pid == 0) {			//child
			pid_t	childpid;
	
			childpid = getpid();
    			print_command_executed(childpid);

			args = strsplit(command+1, " ", &numtokens);
	    	execvp(args[0], args);

	    	print_exec_failed(command);
		} else
			print_fork_failed();
	} else
			print_no_history_match();

}

void handle_nonbuiltin_commands(Log * logname) {

	pid_t	pid;
        int back = 0;

        for(size_t i = 1; i < strlen(command); i++){
    	    if(command[i] == '&'){
    		if(command[i-1] == ' ')
    			command[i-1] = '\0';    					
    		else
    			command[i] = '\0';
    		}
    		back = 1;
    	}

	pid = fork();

    	if(pid > 0){
    		int status;
		pid_t	mypid = getpid();
		char *cwd = get_current_dir_name();

    		if(back==0)
    			waitpid(pid, &status, 0);
    		Log_add_command(logname, command);
		print_prompt(cwd, mypid);
		free(cwd);

    	} else if(pid == 0){
		pid_t	childpid;

		childpid = getpid();
    		print_command_executed(childpid);

		args = strsplit(command, " ", &numtokens);
    		execvp(args[0] , args);

    		print_exec_failed(command);
    	}
    	else
    		print_fork_failed();
}

int main(int argc, char *argv[]) {
  // TODO: This is the entry point for your shell.

	char *history_file, *command_file;
//  	char *command = NULL;
	Log *history_log, *command_log;

	if (argc == 0) {
		print_usage();
		return 1;
	}

        history_file = command_file = NULL;
	history_log = command_log = NULL;

	if (argc == 3) {			// Only history or command file
		if(!strcmp( "-h", argv[1]) )
			history_file = argv[2];
		else if(!strcmp ("-f", argv[1]))
			command_file = argv[2];
	}

	if (argc == 5) {			// Both history and command file
		if(!strcmp( "-h", argv[1]) ) {
			history_file = argv[2];
			command_file = argv[4];
		} else if(!strcmp("-f", argv[1])){
			history_file = argv[4];
			command_file = argv[2];
		}
	}
	
	
  	// Setting up in memory log pointer arrays

	if (history_file) {
		history_log = Log_create_from_file(history_file);
	}
	if (command_file) {
		command_log = Log_create_from_file(command_file);
    }

	size_t index;
  	size_t len, size;
  	int done = 0;

        


	len = size = 0;
  	// The main while loop that the code will go through
  	while(!done) {

  		if (command_log) {
		// Iterate thru all commands
		size = Log_size(command_log);

			for (index = 0; index < size; size++) {
				command = strdup(Log_get_command(command_log, index));
	            char *nl = strchr(command, '\n');
	            	if (nl)
	              		*nl = '\0';
	        
	    	    	//int stringlen = strlen(command);
				if(!strcmp(command, "cd")) {
	        	    	handle_changing_directory(NULL);
				} else if(!strcmp(command, "exit")) {
	        	    	handle_death(NULL);
	    				done = 1;
				} else  {
	                 	handle_nonbuiltin_commands(NULL);
				}
	  		}
			handle_death(NULL); // Completed all commands in file
		}

  		getline(&command, &len, stdin);

		size_t command_num;
       
            	// remove newline from the command
            	char *nl = strchr(command, '\n');
            	if (nl)
              		*nl = '\0';
        
    	    	//int stringlen = strlen(command);
		if(!strncmp(command, "cd", 2)) {
        	    	handle_changing_directory(history_log);
		} else if(!strcmp(command, "exit")) {
        	    	handle_death(history_log);
    			done = 1;
		} else if(!strcmp(command, "!history")) {
        	    	handle_history(history_log);
		} else if(command[0] == '#') {
			command_num = atoi(command+1);
        		handle_certain_command(history_log, command_num);
		} else if(command[0] == '!') {
        	    	handle_prefix_command_history(history_log, command+1);
		} else {
                	handle_nonbuiltin_commands(history_log);
		}
  	}
}

#include <format.h>
#include <unistd.h>
#include <string.h>
#include <stddef.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <time.h>

int main(int argc, char *argv[]) {

    struct timespec ts;
    double	elapsedSeconds, startSeconds, endSeconds;
    pid_t	pid;
    int		status;

    if(!strcmp(*argv, "./time"))
	print_time_usage();

    if(clock_gettime(CLOCK_MONOTONIC, &ts)) { 
       // TBD:handle error 
    }

    // Timer value before forking of the child

    startSeconds= ((double)ts.tv_sec + (double)ts.tv_nsec ) / 1000000000.0;

    pid = fork();

    if ( pid > 0) {			// Parent

        waitpid(pid, &status, 0);

        // Timer after the child exit

        if(clock_gettime(CLOCK_MONOTONIC, &ts)) {
            // TBD:handle error 
	}

        endSeconds= ((double)ts.tv_sec + (double)ts.tv_nsec ) / 1000000000.0;

        // Calculate the elasped time

        elapsedSeconds = endSeconds - startSeconds;
	display_results(argv, elapsedSeconds);
	return(elapsedSeconds);

    } else if ( pid == 0) {		// Child
 	execvp(argv[1], &argv[1]);
	print_exec_failed();
    } else { 				// Fork failed
        print_fork_failed();
    }

    return 0;
}
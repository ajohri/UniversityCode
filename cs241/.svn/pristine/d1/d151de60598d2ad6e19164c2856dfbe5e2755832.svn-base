/**
 * MapReduce
 * CS 241 - Spring 2016
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/wait.h>

#include "common.h"

void usage() {
  printf("./mr1 input_file output_file mapper_exec reducer_exec num_mappers\n");
}

// Create an input pipe for each mapper.

  // Create one input pipe for the reducer.

  // Open the output file.

  // Start a splitter process for each mapper.

  // Start all the mapper processes.

  // Start the reducer process.

  // Wait for the reducer to finish.

  // Print nonzero subprocess exit codes.

  // Count the number of lines in the output file.

int main(int argc, char **argv) {
  pid_t pid, rc_pid, reducer_pid;
  pid_t child_pids[2];
  pid_t *splitter_pids;
  pid_t *mapper_pids;

  int pfd[2], input, output, i, status;
  int **pipes, i, number_pipes;
  FILE * outfile;
  char curr_num[1];


  if(argc < 6)
    usage();

  // open input and output files

  number_pipes = atoi(argv[5]);

  splitter_pids = (pid_t *)calloc(number_pipes, sizeof(pid_t));
  mapper_pids = (pid_t *)calloc(number_pipes, sizeof(pid_t));
  pipes = (int **)calloc(number_pipes, sizeof(int *));
  for (i=0; i< number_pipes; i++) {     // Input pipes for each mapper
    pipes[i] = (int *)calloc(2, sizeof(int));
  }

  input = open(argv[1], O_RDONLY);
  outfile = fopen(argv[2], "w+");
  output = fileno(outfile);


  if (pipe(pfd) == -1)
  {
      printf("Error opening pipe !\n");
      exit(1);
  }

  for (i=0; i<number_pipes; i++) {
    if(pipe(pipes[i]) == -1) {
      printf("Error opening pipes for the pipes !\n");
      exit(1);
    }
    descriptors_add(pipes[i][0]);
    descriptors_add(pipes[i][1]);
  }

  descriptors_add(input);
  descriptors_add(output);
  descriptors_add(pfd[0]);
  descriptors_add(pfd[1]);

  for(i = 0; i < number_pipes; i++) {
    pid = splitter_pids[i] = fork();
    if(pid == 0) {
      dup2(pipes[i][1], STDOUT_FILENO);
      sprintf(curr_num, "%d", i);                                           // May need to pass the address
      descriptors_closeall();
      execlp("./splitter", "./splitter", argv[1], argv[5], curr_num, NULL);
      exit(0);
    } else {

    }
  }

  for(i = 0; i < number_pipes; i++) {
    pid = mapper_pids[i] = fork();
    if(pid == 0) {
      dup2(pipes[i][0], STDIN_FILENO);
      dup2(pfd[1], STDOUT_FILENO);
      descriptors_closeall();
      if((execlp(argv[3], argv[3], NULL)) == -1)
        exit(1);
      exit(0);
    } else {

    }
  }

  pid = reducer_pid = fork();
  if(pid == 0) {
    if (close(pfd[1]) == -1) {
      printf("Error closing writing end of pipe \n");
      exit(1);
    }

    dup2(output, STDOUT_FILENO); // Map out_file to stdout
    dup2(pfd[0], STDIN_FILENO); // Map (read) pfd[0] to stdin
    descriptors_closeall();

    if((execlp(argv[4], argv[4], NULL)) == -1)
      exit(1);
    exit(0);
  }





  // for (i=0; i<2; i++){

  //     /* Multiple child forking */
  //   pid = child_pids[i] = fork();

  //   switch(pid) {
  //     case -1:
  //       /* something went wrong */
  //       /* parent exits */
  //       perror("fork");
  //       exit(1);

  //     case 0:
  //             /*Children process*/

  //       printf(" CHILD: number (and return value): %d PID: %d PPID: %d \n", 
    //          i, getpid(), getppid());
  //       if (i==0) {   // Mapper Stage

  //         if (close(pfd[0]) == -1) {
  //             printf("Error closing reading end of pipe \n");
  //             exit(i);
  //         }      

  //         dup2(input, 0); // Map input_file to stdin
  //         dup2(pfd[1], 1);// Map (write) pfd[1] to stdout
  //         descriptors_closeall();

  //         execl(argv[3], argv[3], NULL);

  //       } else {    // Reducer Stage

  //         if (close(pfd[1]) == -1) {
  //           printf("Error closing writing end of pipe \n");
  //           exit(i);
  //         }

  //         dup2(output,1); // Map out_file to stdout
  //         dup2(pfd[0],0); // Map (read) pfd[0] to stdin
  //         descriptors_closeall();

  //         execl(argv[4], argv[4], NULL);
  //       }

  //       exit(i);
  //       break;

  //     default:
  //       break;
  //           /*Miss:xing code for parent process*/
  //   }
  // }   

  /*Parent process*/
  descriptors_closeall();

  if (pid!=0 && pid!=-1) {
      printf("PARENT: my PID is %d\n", getpid());

      descriptors_closeall();
      for (i=0; i<2; i++){
        rc_pid = waitpid(child_pids[i], &status, 0);
        printf("PARENT: Child: %d returned value is: %d\n", child_pids[i], WEXITSTATUS(status));
      }
      descriptors_destroy();
  }
}

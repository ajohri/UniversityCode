/**
 * Machine Problem: Password Cracker
 * CS 241 - Spring 2016
 */

#include "cracker2.h"
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <time.h>
#include <string.h>
#include <pthread.h>

#include "thread_status.h"
#include "utils.h"
#include <unistd.h>
#include "crypt.h"
#include "format.h"

#define MAX_QUEUE 512
#define MAX_SIZE 512
char line[MAX_SIZE];
char *buff;
size_t numThreads = 0;

void * process_task(void * ptr) {
	char *task, *username, *hash, *input, *copy_string, *token;
	char *brkt;
	int mod_counter = 0;
	long *start_index, *count;
	int prefix;

	int threadID = (int)ptr;													// This is thread number 


	//printf("%s\n", (char * )ptr);
	task = buff;
	copy_string = (char *)calloc(strlen(task) + 2, sizeof(char));		// Copy string is being intialized.
	strcpy(copy_string, task);
	token = strtok_r(copy_string, " ", &brkt);
	username = token;
	token = strtok_r(NULL, " ", &brkt);
	hash = token;
	token = strtok_r(NULL, " ", &brkt);
	input = token;
	prefix = getPrefixLength(input);
	mod_counter = prefix;
	while(input[mod_counter] == '.') {
		mod_counter++;
	}
	input[mod_counter] = '\0';

	getSubrange(mod_counter - prefix, numThreads, (int)threadID, start_index, count);
	setStringPosition(input, *start_index);



	return NULL;
}



int start(size_t thread_count) {
  // TODO your code here, make sure to use thread_count!
	numThreads = thread_count;


	fgets(line, MAX_SIZE, stdin);
	buff = (char *)calloc(512, sizeof(char));
	strcpy(buff, line);


	pthread_t *threads;
	size_t i;

	threads = (pthread_t *)calloc(thread_count, sizeof(pthread_t));

	for (i = 0; i < thread_count; i++) {											// Creating each threading and giving a specific line to do everything in.
		pthread_create(&threads[i], NULL, &process_task, (void *)(i+1));
  	}



  	return 0;
}

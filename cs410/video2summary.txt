Tokenization
Normalize Lexical Units: Words with similar meanings will be mapped to the same indexing term.
Indexing = Convert documents to data structures that can enable fast search (precomputing as much as we can)
	Inverted Index is the dominating index method for supporting basic search algorithms
		This can allow you to make a ranked linked list for each term that you come across in other documents (works well with indexing)
There is an empirical distribution of words where some words will appear frequently in one document but not so much in others with exceptions to words like (a, the, we) since there are naturally common words

Zipf's Law
	rank * frequency ~~ constant

	F(w) = (C) / (r(w)^a) : a ~~ 1, C ~~ 0.1

Data Structures for Inverted Index
	Dictionary: modest size
		Needs fast random access
		Preferred to be in memory
		Hastable, B-trees, etc
	Postings: huge
		Sequential access is expected
		Can stay on disk
		May contain docID, term freq., term pos, etc
		Compression is desirable

Constructing an Inverted Index
	Main difficulty is building a huge index with limited memory.
	Memory-based methods: not usable for large collections
	Sort-Based methods:
		Step 1 - collect local (termID, docID, freq) tuples
		Step 2 - sort local tuples (to make "runs")
		Step 3 - pair-wise merge runs
		Step 4 - Output inverted file 

Inverted Index Compression
	Leverage skewed distrubution of values and use variable-length encoding
	TF compression
		Fewer bits for small(high frequency) integers at the cost of more bits or large integers
	Doc ID compression
		"d-gap" (store difference)
		fesible due to sequential acess

Inverted Index and it's Construction
	Preprocess as much data as we can
	Compression when appropriate

Further Improving Efficiency
	Caching 
	Keeping only the most promising accumulators
	Scaling up to Web Scale

Evaluataion
Why Evaluation?
	Reason 1: Assess the actual utility of a TR system
	Reason 2: Compare different systems and methods

The Cranfield Evaulation Method
	Idea: Build reusable test collections & define measures
Can be used to test different systems

Precision: All of the retrieved results all relevant
Recall: Have all the relevant documents been retrieved
F Measure combines Precision and Recall.